// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// C_cv_fix_effects_adaptive
List C_cv_fix_effects_adaptive(List t_x, List X, Eigen::MatrixXd Y, Eigen::VectorXi main_index, Eigen::VectorXi inter_index, List x_params_raw, List x_params, List y_params, List all_folds, int upper_comp, double thresh);
RcppExport SEXP _FRegSigCom_C_cv_fix_effects_adaptive(SEXP t_xSEXP, SEXP XSEXP, SEXP YSEXP, SEXP main_indexSEXP, SEXP inter_indexSEXP, SEXP x_params_rawSEXP, SEXP x_paramsSEXP, SEXP y_paramsSEXP, SEXP all_foldsSEXP, SEXP upper_compSEXP, SEXP threshSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type t_x(t_xSEXP);
    Rcpp::traits::input_parameter< List >::type X(XSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type Y(YSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi >::type main_index(main_indexSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi >::type inter_index(inter_indexSEXP);
    Rcpp::traits::input_parameter< List >::type x_params_raw(x_params_rawSEXP);
    Rcpp::traits::input_parameter< List >::type x_params(x_paramsSEXP);
    Rcpp::traits::input_parameter< List >::type y_params(y_paramsSEXP);
    Rcpp::traits::input_parameter< List >::type all_folds(all_foldsSEXP);
    Rcpp::traits::input_parameter< int >::type upper_comp(upper_compSEXP);
    Rcpp::traits::input_parameter< double >::type thresh(threshSEXP);
    rcpp_result_gen = Rcpp::wrap(C_cv_fix_effects_adaptive(t_x, X, Y, main_index, inter_index, x_params_raw, x_params, y_params, all_folds, upper_comp, thresh));
    return rcpp_result_gen;
END_RCPP
}
// C_cv_fix_effects
List C_cv_fix_effects(List t_x, List X, Eigen::MatrixXd Y, Eigen::VectorXi main_index, Eigen::VectorXi inter_index, List x_params, List y_params, List all_folds, int upper_comp, double thresh);
RcppExport SEXP _FRegSigCom_C_cv_fix_effects(SEXP t_xSEXP, SEXP XSEXP, SEXP YSEXP, SEXP main_indexSEXP, SEXP inter_indexSEXP, SEXP x_paramsSEXP, SEXP y_paramsSEXP, SEXP all_foldsSEXP, SEXP upper_compSEXP, SEXP threshSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type t_x(t_xSEXP);
    Rcpp::traits::input_parameter< List >::type X(XSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type Y(YSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi >::type main_index(main_indexSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi >::type inter_index(inter_indexSEXP);
    Rcpp::traits::input_parameter< List >::type x_params(x_paramsSEXP);
    Rcpp::traits::input_parameter< List >::type y_params(y_paramsSEXP);
    Rcpp::traits::input_parameter< List >::type all_folds(all_foldsSEXP);
    Rcpp::traits::input_parameter< int >::type upper_comp(upper_compSEXP);
    Rcpp::traits::input_parameter< double >::type thresh(threshSEXP);
    rcpp_result_gen = Rcpp::wrap(C_cv_fix_effects(t_x, X, Y, main_index, inter_index, x_params, y_params, all_folds, upper_comp, thresh));
    return rcpp_result_gen;
END_RCPP
}
// C_pred_ff_inter
Eigen::MatrixXd C_pred_ff_inter(List fit_cv, Eigen::MatrixXd Y_train, List X_test, List x_params, List y_params, List y_penalty_inv);
RcppExport SEXP _FRegSigCom_C_pred_ff_inter(SEXP fit_cvSEXP, SEXP Y_trainSEXP, SEXP X_testSEXP, SEXP x_paramsSEXP, SEXP y_paramsSEXP, SEXP y_penalty_invSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type fit_cv(fit_cvSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type Y_train(Y_trainSEXP);
    Rcpp::traits::input_parameter< List >::type X_test(X_testSEXP);
    Rcpp::traits::input_parameter< List >::type x_params(x_paramsSEXP);
    Rcpp::traits::input_parameter< List >::type y_params(y_paramsSEXP);
    Rcpp::traits::input_parameter< List >::type y_penalty_inv(y_penalty_invSEXP);
    rcpp_result_gen = Rcpp::wrap(C_pred_ff_inter(fit_cv, Y_train, X_test, x_params, y_params, y_penalty_inv));
    return rcpp_result_gen;
END_RCPP
}
// C_stepwise_adaptive
List C_stepwise_adaptive(List t_x, List X, Eigen::MatrixXd Y, List x_params_raw, List x_params, List y_params, List all_folds, int upper_comp, double thresh);
RcppExport SEXP _FRegSigCom_C_stepwise_adaptive(SEXP t_xSEXP, SEXP XSEXP, SEXP YSEXP, SEXP x_params_rawSEXP, SEXP x_paramsSEXP, SEXP y_paramsSEXP, SEXP all_foldsSEXP, SEXP upper_compSEXP, SEXP threshSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type t_x(t_xSEXP);
    Rcpp::traits::input_parameter< List >::type X(XSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type Y(YSEXP);
    Rcpp::traits::input_parameter< List >::type x_params_raw(x_params_rawSEXP);
    Rcpp::traits::input_parameter< List >::type x_params(x_paramsSEXP);
    Rcpp::traits::input_parameter< List >::type y_params(y_paramsSEXP);
    Rcpp::traits::input_parameter< List >::type all_folds(all_foldsSEXP);
    Rcpp::traits::input_parameter< int >::type upper_comp(upper_compSEXP);
    Rcpp::traits::input_parameter< double >::type thresh(threshSEXP);
    rcpp_result_gen = Rcpp::wrap(C_stepwise_adaptive(t_x, X, Y, x_params_raw, x_params, y_params, all_folds, upper_comp, thresh));
    return rcpp_result_gen;
END_RCPP
}
// C_find_coef_ff_interaction
List C_find_coef_ff_interaction(List fit_cv, List X_train, Eigen::MatrixXd Y_train, List x_params, List y_params, List y_penalty_inv);
RcppExport SEXP _FRegSigCom_C_find_coef_ff_interaction(SEXP fit_cvSEXP, SEXP X_trainSEXP, SEXP Y_trainSEXP, SEXP x_paramsSEXP, SEXP y_paramsSEXP, SEXP y_penalty_invSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type fit_cv(fit_cvSEXP);
    Rcpp::traits::input_parameter< List >::type X_train(X_trainSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type Y_train(Y_trainSEXP);
    Rcpp::traits::input_parameter< List >::type x_params(x_paramsSEXP);
    Rcpp::traits::input_parameter< List >::type y_params(y_paramsSEXP);
    Rcpp::traits::input_parameter< List >::type y_penalty_inv(y_penalty_invSEXP);
    rcpp_result_gen = Rcpp::wrap(C_find_coef_ff_interaction(fit_cv, X_train, Y_train, x_params, y_params, y_penalty_inv));
    return rcpp_result_gen;
END_RCPP
}
// c_cv_ff_spike
List c_cv_ff_spike(List t_x_list, List X, Eigen::MatrixXd Y, List x_params, List y_params, Eigen::MatrixXi all_folds, int upper_comp, double thresh);
RcppExport SEXP _FRegSigCom_c_cv_ff_spike(SEXP t_x_listSEXP, SEXP XSEXP, SEXP YSEXP, SEXP x_paramsSEXP, SEXP y_paramsSEXP, SEXP all_foldsSEXP, SEXP upper_compSEXP, SEXP threshSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type t_x_list(t_x_listSEXP);
    Rcpp::traits::input_parameter< List >::type X(XSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type Y(YSEXP);
    Rcpp::traits::input_parameter< List >::type x_params(x_paramsSEXP);
    Rcpp::traits::input_parameter< List >::type y_params(y_paramsSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXi >::type all_folds(all_foldsSEXP);
    Rcpp::traits::input_parameter< int >::type upper_comp(upper_compSEXP);
    Rcpp::traits::input_parameter< double >::type thresh(threshSEXP);
    rcpp_result_gen = Rcpp::wrap(c_cv_ff_spike(t_x_list, X, Y, x_params, y_params, all_folds, upper_comp, thresh));
    return rcpp_result_gen;
END_RCPP
}
// max_eig
double max_eig(Eigen::MatrixXd A);
RcppExport SEXP _FRegSigCom_max_eig(SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(max_eig(A));
    return rcpp_result_gen;
END_RCPP
}
// max_H
List max_H(Eigen::VectorXd gamma0, Eigen::MatrixXd Psi0, Eigen::VectorXd t0, int nvar, double tau, double lambda);
RcppExport SEXP _FRegSigCom_max_H(SEXP gamma0SEXP, SEXP Psi0SEXP, SEXP t0SEXP, SEXP nvarSEXP, SEXP tauSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type gamma0(gamma0SEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type Psi0(Psi0SEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type t0(t0SEXP);
    Rcpp::traits::input_parameter< int >::type nvar(nvarSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(max_H(gamma0, Psi0, t0, nvar, tau, lambda));
    return rcpp_result_gen;
END_RCPP
}
// C_cv_ff_sig
List C_cv_ff_sig(List t_x, List X, Eigen::MatrixXd Y, List x_params, List y_params, List all_folds, int upper_comp, double thresh);
RcppExport SEXP _FRegSigCom_C_cv_ff_sig(SEXP t_xSEXP, SEXP XSEXP, SEXP YSEXP, SEXP x_paramsSEXP, SEXP y_paramsSEXP, SEXP all_foldsSEXP, SEXP upper_compSEXP, SEXP threshSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type t_x(t_xSEXP);
    Rcpp::traits::input_parameter< List >::type X(XSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type Y(YSEXP);
    Rcpp::traits::input_parameter< List >::type x_params(x_paramsSEXP);
    Rcpp::traits::input_parameter< List >::type y_params(y_paramsSEXP);
    Rcpp::traits::input_parameter< List >::type all_folds(all_foldsSEXP);
    Rcpp::traits::input_parameter< int >::type upper_comp(upper_compSEXP);
    Rcpp::traits::input_parameter< double >::type thresh(threshSEXP);
    rcpp_result_gen = Rcpp::wrap(C_cv_ff_sig(t_x, X, Y, x_params, y_params, all_folds, upper_comp, thresh));
    return rcpp_result_gen;
END_RCPP
}
// C_cv_ff_sig_with_scalar
List C_cv_ff_sig_with_scalar(List t_x, List X, Eigen::MatrixXd Y, Eigen::MatrixXd Z, List x_params, List y_params, List all_folds, int upper_comp, double thresh);
RcppExport SEXP _FRegSigCom_C_cv_ff_sig_with_scalar(SEXP t_xSEXP, SEXP XSEXP, SEXP YSEXP, SEXP ZSEXP, SEXP x_paramsSEXP, SEXP y_paramsSEXP, SEXP all_foldsSEXP, SEXP upper_compSEXP, SEXP threshSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type t_x(t_xSEXP);
    Rcpp::traits::input_parameter< List >::type X(XSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type Y(YSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< List >::type x_params(x_paramsSEXP);
    Rcpp::traits::input_parameter< List >::type y_params(y_paramsSEXP);
    Rcpp::traits::input_parameter< List >::type all_folds(all_foldsSEXP);
    Rcpp::traits::input_parameter< int >::type upper_comp(upper_compSEXP);
    Rcpp::traits::input_parameter< double >::type thresh(threshSEXP);
    rcpp_result_gen = Rcpp::wrap(C_cv_ff_sig_with_scalar(t_x, X, Y, Z, x_params, y_params, all_folds, upper_comp, thresh));
    return rcpp_result_gen;
END_RCPP
}
// cv_hd_msof
List cv_hd_msof(List X, Eigen::MatrixXd Y, List wb, List x_params, List all_folds, int max_comp, double thresh);
RcppExport SEXP _FRegSigCom_cv_hd_msof(SEXP XSEXP, SEXP YSEXP, SEXP wbSEXP, SEXP x_paramsSEXP, SEXP all_foldsSEXP, SEXP max_compSEXP, SEXP threshSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type X(XSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type Y(YSEXP);
    Rcpp::traits::input_parameter< List >::type wb(wbSEXP);
    Rcpp::traits::input_parameter< List >::type x_params(x_paramsSEXP);
    Rcpp::traits::input_parameter< List >::type all_folds(all_foldsSEXP);
    Rcpp::traits::input_parameter< int >::type max_comp(max_compSEXP);
    Rcpp::traits::input_parameter< double >::type thresh(threshSEXP);
    rcpp_result_gen = Rcpp::wrap(cv_hd_msof(X, Y, wb, x_params, all_folds, max_comp, thresh));
    return rcpp_result_gen;
END_RCPP
}
// get_pred_msof
Eigen::MatrixXd get_pred_msof(List X_test, double X_scale, Eigen::MatrixXd XbTransInv, Eigen::MatrixXd Beta, Eigen::MatrixXd normTransInv, List mu_x, List wb, Eigen::MatrixXd Y, int nobs, int nbasis, int nvarX);
RcppExport SEXP _FRegSigCom_get_pred_msof(SEXP X_testSEXP, SEXP X_scaleSEXP, SEXP XbTransInvSEXP, SEXP BetaSEXP, SEXP normTransInvSEXP, SEXP mu_xSEXP, SEXP wbSEXP, SEXP YSEXP, SEXP nobsSEXP, SEXP nbasisSEXP, SEXP nvarXSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type X_test(X_testSEXP);
    Rcpp::traits::input_parameter< double >::type X_scale(X_scaleSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type XbTransInv(XbTransInvSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type Beta(BetaSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type normTransInv(normTransInvSEXP);
    Rcpp::traits::input_parameter< List >::type mu_x(mu_xSEXP);
    Rcpp::traits::input_parameter< List >::type wb(wbSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type Y(YSEXP);
    Rcpp::traits::input_parameter< int >::type nobs(nobsSEXP);
    Rcpp::traits::input_parameter< int >::type nbasis(nbasisSEXP);
    Rcpp::traits::input_parameter< int >::type nvarX(nvarXSEXP);
    rcpp_result_gen = Rcpp::wrap(get_pred_msof(X_test, X_scale, XbTransInv, Beta, normTransInv, mu_x, wb, Y, nobs, nbasis, nvarX));
    return rcpp_result_gen;
END_RCPP
}
// C_cv_mof
List C_cv_mof(List t_x, List X, Eigen::MatrixXd Y, List x_params, List all_folds, int upper_comp, double thresh);
RcppExport SEXP _FRegSigCom_C_cv_mof(SEXP t_xSEXP, SEXP XSEXP, SEXP YSEXP, SEXP x_paramsSEXP, SEXP all_foldsSEXP, SEXP upper_compSEXP, SEXP threshSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type t_x(t_xSEXP);
    Rcpp::traits::input_parameter< List >::type X(XSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type Y(YSEXP);
    Rcpp::traits::input_parameter< List >::type x_params(x_paramsSEXP);
    Rcpp::traits::input_parameter< List >::type all_folds(all_foldsSEXP);
    Rcpp::traits::input_parameter< int >::type upper_comp(upper_compSEXP);
    Rcpp::traits::input_parameter< double >::type thresh(threshSEXP);
    rcpp_result_gen = Rcpp::wrap(C_cv_mof(t_x, X, Y, x_params, all_folds, upper_comp, thresh));
    return rcpp_result_gen;
END_RCPP
}
// c_prod
Eigen::MatrixXd c_prod(Eigen::MatrixXd A_ini, Eigen::MatrixXd B_ini);
RcppExport SEXP _FRegSigCom_c_prod(SEXP A_iniSEXP, SEXP B_iniSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type A_ini(A_iniSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type B_ini(B_iniSEXP);
    rcpp_result_gen = Rcpp::wrap(c_prod(A_ini, B_ini));
    return rcpp_result_gen;
END_RCPP
}
// C_cv_nonlinear_ff
List C_cv_nonlinear_ff(Eigen::MatrixXd G_ini, Eigen::MatrixXd Y, List x_params, List y_params, Eigen::MatrixXi all_folds, int upper_comp, double thresh);
RcppExport SEXP _FRegSigCom_C_cv_nonlinear_ff(SEXP G_iniSEXP, SEXP YSEXP, SEXP x_paramsSEXP, SEXP y_paramsSEXP, SEXP all_foldsSEXP, SEXP upper_compSEXP, SEXP threshSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type G_ini(G_iniSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type Y(YSEXP);
    Rcpp::traits::input_parameter< List >::type x_params(x_paramsSEXP);
    Rcpp::traits::input_parameter< List >::type y_params(y_paramsSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXi >::type all_folds(all_foldsSEXP);
    Rcpp::traits::input_parameter< int >::type upper_comp(upper_compSEXP);
    Rcpp::traits::input_parameter< double >::type thresh(threshSEXP);
    rcpp_result_gen = Rcpp::wrap(C_cv_nonlinear_ff(G_ini, Y, x_params, y_params, all_folds, upper_comp, thresh));
    return rcpp_result_gen;
END_RCPP
}
// c_cv_spiky_scalar_on_function
List c_cv_spiky_scalar_on_function(List t_x_list, List X, Eigen::VectorXd Y, List x_params, List all_folds);
RcppExport SEXP _FRegSigCom_c_cv_spiky_scalar_on_function(SEXP t_x_listSEXP, SEXP XSEXP, SEXP YSEXP, SEXP x_paramsSEXP, SEXP all_foldsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type t_x_list(t_x_listSEXP);
    Rcpp::traits::input_parameter< List >::type X(XSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type Y(YSEXP);
    Rcpp::traits::input_parameter< List >::type x_params(x_paramsSEXP);
    Rcpp::traits::input_parameter< List >::type all_folds(all_foldsSEXP);
    rcpp_result_gen = Rcpp::wrap(c_cv_spiky_scalar_on_function(t_x_list, X, Y, x_params, all_folds));
    return rcpp_result_gen;
END_RCPP
}
// basic_max
List basic_max(Eigen::VectorXd a, double lambda);
RcppExport SEXP _FRegSigCom_basic_max(SEXP aSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(basic_max(a, lambda));
    return rcpp_result_gen;
END_RCPP
}
// find_orth_basis
Eigen::MatrixXd find_orth_basis(Eigen::MatrixXd X);
RcppExport SEXP _FRegSigCom_find_orth_basis(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(find_orth_basis(X));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_FRegSigCom_C_cv_fix_effects_adaptive", (DL_FUNC) &_FRegSigCom_C_cv_fix_effects_adaptive, 11},
    {"_FRegSigCom_C_cv_fix_effects", (DL_FUNC) &_FRegSigCom_C_cv_fix_effects, 10},
    {"_FRegSigCom_C_pred_ff_inter", (DL_FUNC) &_FRegSigCom_C_pred_ff_inter, 6},
    {"_FRegSigCom_C_stepwise_adaptive", (DL_FUNC) &_FRegSigCom_C_stepwise_adaptive, 9},
    {"_FRegSigCom_C_find_coef_ff_interaction", (DL_FUNC) &_FRegSigCom_C_find_coef_ff_interaction, 6},
    {"_FRegSigCom_c_cv_ff_spike", (DL_FUNC) &_FRegSigCom_c_cv_ff_spike, 8},
    {"_FRegSigCom_max_eig", (DL_FUNC) &_FRegSigCom_max_eig, 1},
    {"_FRegSigCom_max_H", (DL_FUNC) &_FRegSigCom_max_H, 6},
    {"_FRegSigCom_C_cv_ff_sig", (DL_FUNC) &_FRegSigCom_C_cv_ff_sig, 8},
    {"_FRegSigCom_C_cv_ff_sig_with_scalar", (DL_FUNC) &_FRegSigCom_C_cv_ff_sig_with_scalar, 9},
    {"_FRegSigCom_cv_hd_msof", (DL_FUNC) &_FRegSigCom_cv_hd_msof, 7},
    {"_FRegSigCom_get_pred_msof", (DL_FUNC) &_FRegSigCom_get_pred_msof, 11},
    {"_FRegSigCom_C_cv_mof", (DL_FUNC) &_FRegSigCom_C_cv_mof, 7},
    {"_FRegSigCom_c_prod", (DL_FUNC) &_FRegSigCom_c_prod, 2},
    {"_FRegSigCom_C_cv_nonlinear_ff", (DL_FUNC) &_FRegSigCom_C_cv_nonlinear_ff, 7},
    {"_FRegSigCom_c_cv_spiky_scalar_on_function", (DL_FUNC) &_FRegSigCom_c_cv_spiky_scalar_on_function, 5},
    {"_FRegSigCom_basic_max", (DL_FUNC) &_FRegSigCom_basic_max, 2},
    {"_FRegSigCom_find_orth_basis", (DL_FUNC) &_FRegSigCom_find_orth_basis, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_FRegSigCom(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
